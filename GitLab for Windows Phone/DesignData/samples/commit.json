{
    "Commit": {
        "id": "b51619d1176487f45287e62f6659dad70f3af5d8",
        "short_id": "b51619d1",
        "title": "OCRize documents when they're added to a case",
        "author_name": "Mickael GOETZ",
        "author_email": "contact@mickael-goetz.com",
        "created_at": "2015-02-05T10:09:07.000+01:00",
        "message": "OCRize documents when they're added to a case\n"
    },

    "Diffs": [
        {
            "diff": "--- a/AidaCorrex/AidaCorrex.csproj\n+++ b/AidaCorrex/AidaCorrex.csproj\n@@ -149,9 +149,11 @@\n     \u003cCompile Include=\"Converters\\TitleToFontWeightConverter.cs\" /\u003e\n     \u003cCompile Include=\"Core\\Extensions\\PostExtensions.cs\" /\u003e\n     \u003cCompile Include=\"Core\\Extensions\\ScrollViewerExtensions.cs\" /\u003e\n+    \u003cCompile Include=\"Core\\Extensions\\StorageFileExtensions.cs\" /\u003e\n     \u003cCompile Include=\"Core\\Extensions\\StringExtensions.cs\" /\u003e\n     \u003cCompile Include=\"Core\\Extensions\\XElementExtension.cs\" /\u003e\n     \u003cCompile Include=\"Core\\Kernel.cs\" /\u003e\n+    \u003cCompile Include=\"Core\\OcrTask.cs\" /\u003e\n     \u003cCompile Include=\"Core\\Utils\\FrameRegexes.cs\" /\u003e\n     \u003cCompile Include=\"Core\\Utils\\NetworkDaemon.cs\" /\u003e\n     \u003cCompile Include=\"DataTemplates\\FacebookPostDataTemplateSelector.cs\" /\u003e\n@@ -290,6 +292,7 @@\n     \u003cCompile Include=\"ViewModels\\Frame\\FrameTimeValueViewModel.cs\" /\u003e\n     \u003cCompile Include=\"ViewModels\\Frame\\FrameValueViewModel.cs\" /\u003e\n     \u003cCompile Include=\"ViewModels\\Locator.cs\" /\u003e\n+    \u003cCompile Include=\"ViewModels\\OcrDocumentViewModel.cs\" /\u003e\n     \u003cCompile Include=\"ViewModels\\Pages\\CaseListPageViewModel.cs\" /\u003e\n     \u003cCompile Include=\"ViewModels\\Pages\\ChatPageViewModel.cs\" /\u003e\n     \u003cCompile Include=\"ViewModels\\Pages\\CodePageViewModel.cs\" /\u003e\n@@ -651,9 +654,9 @@\n     \u003cReference Include=\"InfragisticsWRT.Controls.Menus.XamRadialMenu.v14.2, Version=14.2.20142.2048, Culture=neutral, PublicKeyToken=7dd5c3163f2cd0cb, processorArchitecture=MSIL\" /\u003e\n     \u003cReference Include=\"InfragisticsWRT.DataVisualization.v14.2, Version=14.2.20142.2048, Culture=neutral, PublicKeyToken=7dd5c3163f2cd0cb, processorArchitecture=MSIL\" /\u003e\n     \u003cReference Include=\"InfragisticsWRT.v14.2, Version=14.2.20142.2048, Culture=neutral, PublicKeyToken=7dd5c3163f2cd0cb, processorArchitecture=MSIL\" /\u003e\n-    \u003cReference Include=\"Matrix, Version=1.6.0.0, Culture=neutral, PublicKeyToken=0120f1df71ff86bc, processorArchitecture=MSIL\"\u003e\n+    \u003cReference Include=\"Matrix, Version=1.6.0.6, Culture=neutral, PublicKeyToken=0120f1df71ff86bc, processorArchitecture=MSIL\"\u003e\n       \u003cSpecificVersion\u003eFalse\u003c/SpecificVersion\u003e\n-      \u003cHintPath\u003e..\\packages\\MatriX.1.6.0.0\\lib\\netcore45\\Matrix.dll\u003c/HintPath\u003e\n+      \u003cHintPath\u003e..\\packages\\MatriX.1.6.0.6\\lib\\netcore45\\Matrix.dll\u003c/HintPath\u003e\n     \u003c/Reference\u003e\n     \u003cReference Include=\"Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed, processorArchitecture=MSIL\"\u003e\n       \u003cSpecificVersion\u003eFalse\u003c/SpecificVersion\u003e",
            "new_path": "AidaCorrex/AidaCorrex.csproj",
            "old_path": "AidaCorrex/AidaCorrex.csproj",
            "a_mode": "100644",
            "b_mode": "100644",
            "new_file": false,
            "renamed_file": false,
            "deleted_file": false
        },
        {
            "diff": "--- /dev/null\n+++ b/AidaCorrex/Core/Extensions/StorageFileExtensions.cs\n@@ -0,0 +1,22 @@\n+﻿using Windows.Storage;\n+\n+namespace AidaCorrex.Core.Extensions\n+{\n+    public static class StorageFileExtensions\n+    {\n+        public static bool IsImage(this StorageFile file)\n+        {\n+            return file.ContentType.StartsWith(\"image\");\n+        }\n+\n+        public static bool IsPdf(this StorageFile file)\n+        {\n+            return file.ContentType.Contains(\"pdf\") || file.FileType.Contains(\"pdf\");\n+        }\n+\n+        public static bool CanBeOcrized(this StorageFile file)\n+        {\n+            return file.IsImage() || file.IsPdf();\n+        }\n+    }\n+}",
            "new_path": "AidaCorrex/Core/Extensions/StorageFileExtensions.cs",
            "old_path": "AidaCorrex/Core/Extensions/StorageFileExtensions.cs",
            "a_mode": "0",
            "b_mode": "100644",
            "new_file": true,
            "renamed_file": false,
            "deleted_file": false
        },
        {
            "diff": "--- /dev/null\n+++ b/AidaCorrex/Core/OcrTask.cs\n@@ -0,0 +1,222 @@\n+﻿using System;\n+using System.Collections.Generic;\n+using System.Threading;\n+using System.Threading.Tasks;\n+using Windows.Data.Pdf;\n+using Windows.Foundation;\n+using Windows.Graphics.Imaging;\n+using Windows.Storage;\n+using Windows.Storage.Streams;\n+using WindowsPreview.Media.Ocr;\n+using AidaCorrex.Core.Extensions;\n+\n+namespace AidaCorrex.Core\n+{\n+    public class OcrTask : IDisposable\n+    {\n+        public StorageFile File { get; private set; }\n+\n+        public Task Task { get; private set; }\n+\n+        public CancellationTokenSource CancellationTokenSource { get; private set; }\n+\n+        public CancellationToken Token { get; private set; }\n+\n+        public string Content { get; private set; }\n+\n+        public OcrTask() : this(null)\n+        {\n+            \n+        }\n+\n+        public OcrTask(StorageFile file)\n+        {\n+            File = file;\n+            Content = String.Empty;\n+            CancellationTokenSource = new CancellationTokenSource();\n+            Token = CancellationTokenSource.Token;\n+        }\n+        \n+        public Task Analyse()\n+        {\n+            return Task.Run(async () =\u003e\n+            {\n+                var documentBuffers = await GetPixelBuffers(File);\n+                if (Token.IsCancellationRequested)\n+                {\n+                    return;\n+                }\n+\n+                foreach (var docBuffer in documentBuffers)\n+                {\n+                    Token.ThrowIfCancellationRequested();\n+                    var engine = new OcrEngine(OcrLanguage.French);\n+                    var results = await engine.RecognizeAsync(Convert.ToUInt32(docBuffer.Size.Height), Convert.ToUInt32(docBuffer.Size.Width), docBuffer.Buffer);\n+\n+                    if (results != null)\n+                    {\n+                        if (results.Lines == null || results.Lines.Count == 0)\n+                        {\n+                            continue;\n+                        }\n+\n+                        foreach (var ocrLine in results.Lines)\n+                        {\n+                            foreach (var ocrWord in ocrLine.Words)\n+                            {\n+                                Content += ocrWord.Text + Space;\n+                            }\n+\n+                            Content += NewLine;\n+                        }\n+                    }\n+                }\n+            }, Token);\n+        }\n+\n+        private const string Space = \" \";\n+        private const string NewLine = \"\\n\";\n+\n+        private const double MaxOcrImageSize = 2600d;\n+        private const double MinOcrImageSize = 40d;\n+\n+        private async Task\u003cIList\u003cDocumentPixelBufferViewModel\u003e\u003e GetPixelBuffers(StorageFile file)\n+        {\n+            if (file.IsPdf())\n+            {\n+                return await GetBuffersFromPdf(file);\n+            }\n+\n+            if (file.IsImage())\n+            {\n+                return await GetBufferFromImage(file);\n+            }\n+\n+            throw new ArgumentException(\"file must be a PDF or an image\", \"file\");\n+        }\n+\n+        private async Task\u003cIList\u003cDocumentPixelBufferViewModel\u003e\u003e GetBuffersFromPdf(StorageFile file)\n+        {\n+            var streams = new List\u003cDocumentPixelBufferViewModel\u003e();\n+            var pdfDocument = await PdfDocument.LoadFromFileAsync(file);\n+            for (uint i = 0; i \u003c pdfDocument.PageCount; i++)\n+            {\n+                var page = pdfDocument.GetPage(i);\n+\n+                Token.ThrowIfCancellationRequested();\n+\n+                await page.PreparePageAsync();\n+\n+                var size = NormalizeSize(page.Size.Width, page.Size.Height);\n+\n+                if (size.Height \u003c MinOcrImageSize || size.Width \u003c MinOcrImageSize)\n+                {\n+                    continue;\n+                }\n+\n+                using (var stream = new InMemoryRandomAccessStream())\n+                {\n+                    Token.ThrowIfCancellationRequested();\n+                    await page.RenderToStreamAsync(stream, new PdfPageRenderOptions() { DestinationHeight = Convert.ToUInt32(size.Height), DestinationWidth = Convert.ToUInt32(size.Width) });\n+\n+                    Token.ThrowIfCancellationRequested();\n+                    var decoder = await BitmapDecoder.CreateAsync(stream);\n+                    var pixelData = await decoder.GetPixelDataAsync();\n+                    streams.Add(new DocumentPixelBufferViewModel(pixelData.DetachPixelData(), size));\n+                }\n+            }\n+\n+            return streams;\n+        }\n+\n+        private async Task\u003cIList\u003cDocumentPixelBufferViewModel\u003e\u003e GetBufferFromImage(StorageFile file)\n+        {\n+            var buffers = new List\u003cDocumentPixelBufferViewModel\u003e();\n+            var prop = await file.Properties.GetImagePropertiesAsync();\n+            var size = NormalizeSize(prop.Width, prop.Height);\n+\n+            if (size.Height \u003c MinOcrImageSize || size.Width \u003c MinOcrImageSize)\n+            {\n+                return buffers;\n+            }\n+\n+            using (var fileStream = await file.OpenAsync(FileAccessMode.Read))\n+            {\n+                Token.ThrowIfCancellationRequested();\n+                var decoder = await BitmapDecoder.CreateAsync(fileStream);\n+\n+                if (prop.Height \u003e MaxOcrImageSize || prop.Width \u003e MaxOcrImageSize)\n+                {\n+                    using (var encoderStream = new InMemoryRandomAccessStream())\n+                    {\n+                        Token.ThrowIfCancellationRequested();\n+                        var encoder = await BitmapEncoder.CreateForTranscodingAsync(encoderStream, decoder);\n+                        encoder.BitmapTransform.ScaledHeight = Convert.ToUInt32(size.Height);\n+                        encoder.BitmapTransform.ScaledWidth = Convert.ToUInt32(size.Width);\n+\n+                        Token.ThrowIfCancellationRequested();\n+                        await encoder.FlushAsync();\n+                        Token.ThrowIfCancellationRequested();\n+\n+                        decoder = await BitmapDecoder.CreateAsync(encoderStream);\n+                    }\n+                }\n+                \n+                Token.ThrowIfCancellationRequested();\n+                var pixelData = await decoder.GetPixelDataAsync();\n+                buffers.Add(new DocumentPixelBufferViewModel(pixelData.DetachPixelData(), size));\n+            }\n+\n+            return buffers;\n+        }\n+\n+        private static Size NormalizeSize(double width, double height)\n+        {\n+            var h = height;\n+            var w = width;\n+\n+            if (h \u003c MinOcrImageSize || w \u003c MinOcrImageSize)\n+            {\n+                return Size.Empty;\n+            }\n+\n+            if (h \u003e MaxOcrImageSize)\n+            {\n+                h = MaxOcrImageSize;\n+                w = (h / height) * width;\n+            }\n+            else if (w \u003e MaxOcrImageSize)\n+            {\n+                w = MaxOcrImageSize;\n+                h = (w / width) * height;\n+            }\n+\n+            return new Size(w, h);\n+        }\n+\n+        private class DocumentPixelBufferViewModel\n+        {\n+            public byte[] Buffer { get; private set; }\n+\n+            public Size Size { get; private set; }\n+\n+            public DocumentPixelBufferViewModel(byte[] buffer, Size size)\n+            {\n+                Buffer = buffer;\n+                Size = size;\n+            }\n+        }\n+\n+        #region IDisposable Membres\n+\n+        public void Dispose()\n+        {\n+            if (CancellationTokenSource != null)\n+            {\n+                CancellationTokenSource.Dispose();\n+            }\n+        }\n+\n+        #endregion\n+    }\n+}",
            "new_path": "AidaCorrex/Core/OcrTask.cs",
            "old_path": "AidaCorrex/Core/OcrTask.cs",
            "a_mode": "0",
            "b_mode": "100644",
            "new_file": true,
            "renamed_file": false,
            "deleted_file": false
        },
        {
            "diff": "--- a/AidaCorrex/Pages/Case/CasePage.xaml\n+++ b/AidaCorrex/Pages/Case/CasePage.xaml\n@@ -43,7 +43,9 @@\n                                             FalseColor=\"#008B45\"/\u003e\n         \u003cconverters:ItemsCountToVisibilityConverter x:Key=\"ItemsCountToVisibilityConverter\"/\u003e\n         \u003cconverters:ItemsCountToBooleanConverter x:Key=\"ItemsCountToBooleanConverter\"/\u003e\n-\n+        \u003cconverters:BooleanToInversedBooleanConverter x:Key=\"InversedBooleanConverter\" /\u003e\n+        \u003cconverters:BooleanToVisibilityConverter x:Key=\"InversedBooleanToVisibilityConverter\" \n+                                                 IsInversed=\"True\"/\u003e\n         \u003cFlyout x:Name=\"NewAccusedFlyout\"\u003e\n             \u003cStackPanel Orientation=\"Vertical\"\u003e\n                 \u003cTextBox Text=\"{Binding NewAccusedIdentifier, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\"\n@@ -84,6 +86,8 @@\n \n         \u003cColor x:Key=\"TopBarColor\"\u003e#003460\u003c/Color\u003e\n         \u003cColor x:Key=\"RecapColor\"\u003e#004D8E\u003c/Color\u003e\n+        \u003cColor x:Key=\"LightColor\"\u003e#1460AA\u003c/Color\u003e\n+        \u003cSolidColorBrush x:Key=\"LightColorBrush\" Color=\"{StaticResource LightColor}\" /\u003e\n         \u003cStyle x:Key=\"RecapListViewItemStyle\" TargetType=\"ListViewItem\"\u003e\n             \u003cSetter Property=\"FontFamily\" Value=\"{ThemeResource ContentControlThemeFontFamily}\"/\u003e\n             \u003cSetter Property=\"FontSize\" Value=\"{ThemeResource ControlContentThemeFontSize}\"/\u003e\n@@ -161,6 +165,13 @@\n                 \u003cCore:DataTriggerBehavior Binding=\"{Binding SelectedDocuments.Count, Mode=OneWay}\" ComparisonCondition=\"GreaterThan\" Value=\"0\"\u003e\n                     \u003cCore:ChangePropertyAction PropertyName=\"IsOpen\" Value=\"True\"/\u003e\n                 \u003c/Core:DataTriggerBehavior\u003e\n+                \u003cCore:DataTriggerBehavior Binding=\"{Binding OcrDocuments.Count, Mode=OneWay}\" ComparisonCondition=\"GreaterThan\" Value=\"0\"\u003e\n+                    \u003cCore:ChangePropertyAction PropertyName=\"IsOpen\" Value=\"False\"/\u003e\n+                    \u003cCore:ChangePropertyAction PropertyName=\"IsEnabled\" Value=\"False\"/\u003e\n+                \u003c/Core:DataTriggerBehavior\u003e\n+                \u003cCore:DataTriggerBehavior Binding=\"{Binding OcrDocuments.Count, Mode=OneWay}\" ComparisonCondition=\"LessThanOrEqual\" Value=\"0\"\u003e\n+                    \u003cCore:ChangePropertyAction PropertyName=\"IsEnabled\" Value=\"True\"/\u003e\n+                \u003c/Core:DataTriggerBehavior\u003e\n             \u003c/Interactivity:Interaction.Behaviors\u003e\n             \u003cGrid\u003e\n                 \u003cGrid.ColumnDefinitions\u003e\n@@ -194,8 +205,13 @@\n \n                             \u003cAppBarSeparator  /\u003e\n \n-                            \u003cAppBarButton  Icon=\"Rename\" Label=\"Renommer\" \n-                                           IsEnabled=\"{Binding SelectedDocuments.Count, Converter={StaticResource ItemsCountToBooleanConverter}}\"\u003e\n+                            \u003cAppBarButton Label=\"Tout sélectionner\" Icon=\"Bullets\" Command=\"{Binding SelectAllCommand}\"/\u003e\n+                            \u003cAppBarButton Label=\"Annuler la sélection\" Icon=\"AllApps\" Command=\"{Binding DeselectAllCommand}\" /\u003e\n+\n+                            \u003cAppBarSeparator  /\u003e\n+\n+                            \u003cAppBarButton Icon=\"Rename\" Label=\"Renommer\" \n+                                          IsEnabled=\"{Binding SelectedDocuments.Count, Converter={StaticResource ItemsCountToBooleanConverter}}\"\u003e\n                                 \u003cAppBarButton.Flyout\u003e\n                                     \u003cFlyout\u003e\n                                         \u003cGrid\u003e\n@@ -239,12 +255,6 @@\n                                     \u003c/Flyout\u003e\n                                 \u003c/AppBarButton.Flyout\u003e\n                             \u003c/AppBarButton\u003e\n-\n-                            \u003cAppBarSeparator  /\u003e\n-\n-                            \u003cAppBarButton Label=\"Tout sélectionner\" Icon=\"Bullets\" Command=\"{Binding SelectAllCommand}\"/\u003e\n-                            \u003cAppBarButton Label=\"Annuler la sélection\" Icon=\"AllApps\" Command=\"{Binding DeselectAllCommand}\" /\u003e\n-\n                             \u003cAppBarButton Label=\"Trier\" Icon=\"Sort\"\u003e\n                                 \u003cAppBarButton.Flyout\u003e\n                                     \u003cMenuFlyout\u003e\n@@ -281,7 +291,7 @@\n         \u003c/AppBar\u003e\n     \u003c/Page.BottomAppBar\u003e\n \n-    \u003cGrid Background=\"#1460AA\"\u003e\n+    \u003cGrid Background=\"{StaticResource LightColorBrush}\"\u003e\n         \u003cGrid.ChildrenTransitions\u003e\n             \u003cTransitionCollection\u003e\n                 \u003cEntranceThemeTransition/\u003e\n@@ -1002,51 +1012,152 @@\n         \u003c/Grid\u003e\n \n         \u003cGrid Grid.Row=\"0\" Grid.RowSpan=\"2\" \n-              Visibility=\"{Binding IsOcrRunning, Converter={StaticResource BooleanToVisibilityConverter}}\"\n-              Background=\"#94000000\"\u003e\n+              Visibility=\"{Binding OcrDocuments.Count, Converter={StaticResource ItemsCountToVisibilityConverter}}\"\n+              Background=\"#AA000000\"\u003e\n             \u003cGrid.RowDefinitions\u003e\n-                \u003cRowDefinition Height=\".2*\" /\u003e\n+                \u003cRowDefinition Height=\".15*\" /\u003e\n                 \u003cRowDefinition Height=\"*\" /\u003e\n-                \u003cRowDefinition Height=\".2*\" /\u003e\n+                \u003cRowDefinition Height=\".15*\" /\u003e\n             \u003c/Grid.RowDefinitions\u003e\n \n             \u003cGrid Grid.Row=\"1\" Background=\"White\"\u003e\n-                \u003cStackPanel\u003e\n-                    \u003cBorder Padding=\"50, 20\"\u003e\n-                        \u003cBorder.Background\u003e\n-                            \u003cSolidColorBrush Color=\"{StaticResource TopBarColor}\" /\u003e\n-                        \u003c/Border.Background\u003e\n-\n-                        \u003cTextBlock Style=\"{StaticResource HeaderTextBlockStyle}\"\n-                                   FontSize=\"40\"\u003e\n-                            Analyse du document \"\u003cRun Text=\"{Binding CurrentlyAnalysedDocumentName}\" /\u003e\"\n-                        \u003c/TextBlock\u003e\n-                    \u003c/Border\u003e\n-                    \u003cStackPanel RequestedTheme=\"Light\"\n-                                Margin=\"50, 20\"\u003e\n-                        \u003cTextBlock Style=\"{StaticResource BodyTextBlockStyle}\"\u003e\n-                            Persée analyse le document que vous venez d'ajouter. Une fois l'analyse terminée, choisissez l'action à effectuer.\n-                        \u003c/TextBlock\u003e\n-                        \u003cStackPanel Orientation=\"Horizontal\"\n-                                    HorizontalAlignment=\"Center\"\u003e\n-                            \u003cAppBarButton Foreground=\"Red\" Label=\"Ne rien faire\" Icon=\"Cancel\"/\u003e\n-                            \u003cAppBarButton Foreground=\"Green\" Label=\"Créer un nouveau document à partir du texte extrait\" Icon=\"Page\"/\u003e\n-                        \u003c/StackPanel\u003e\n-\n-                        \u003cTextBlock Style=\"{StaticResource BodyTextBlockStyle}\"\u003e\n-                            Si l'analyse est trop longue, vous pouvez l'\n-                            \u003cHyperlink Click=\"Hyperlink_OnClick\"\u003e\n-                                \u003cInteractivity:Interaction.Behaviors\u003e\n-                                    \u003cCore:EventTriggerBehavior EventName=\"Click\"\u003e\n-                                        \u003cCore:InvokeCommandAction Command=\"{Binding CancelOcrCommand, Mode=OneWay}\"/\u003e\n-                                    \u003c/Core:EventTriggerBehavior\u003e\n-                                \u003c/Interactivity:Interaction.Behaviors\u003e\n-                                annuler\n-                            \u003c/Hyperlink\u003e \n-                            et la relancer éventuellement plus tard.\n-                        \u003c/TextBlock\u003e\n+                \u003cGrid.RowDefinitions\u003e\n+                    \u003cRowDefinition Height=\"Auto\" /\u003e\n+                    \u003cRowDefinition Height=\"Auto\" /\u003e\n+                    \u003cRowDefinition Height=\"*\" /\u003e\n+                    \u003cRowDefinition Height=\"Auto\" /\u003e\n+                \u003c/Grid.RowDefinitions\u003e\n+\n+                \u003cBorder Padding=\"50, 20\"\u003e\n+                    \u003cBorder.Background\u003e\n+                        \u003cSolidColorBrush Color=\"{StaticResource TopBarColor}\" /\u003e\n+                    \u003c/Border.Background\u003e\n+\n+                    \u003cTextBlock Style=\"{StaticResource HeaderTextBlockStyle}\"\n+                                   FontSize=\"40\"\n+                                   Text=\"Analyse des documents\"/\u003e\n+                \u003c/Border\u003e\n+\n+                \u003cTextBlock Grid.Row=\"1\" Padding=\"20\"\n+                           RequestedTheme=\"Light\"\n+                           Style=\"{StaticResource BodyTextBlockStyle}\"\u003e\n+                    Persée analyse les documents que vous venez d'ajouter. \n+                    \u003cLineBreak /\u003eUne fois l'analyse terminée, vous pouvez choisir si le contenu éventuellement extrait de ce document doit être ajouté à l'affaire en tant que nouveau document.\n+                    \u003cLineBreak /\u003eVous pouvez également annuler l'analyse d'un document.\n+                \u003c/TextBlock\u003e\n+\n+                \u003cScrollViewer Grid.Row=\"2\" ZoomMode=\"Disabled\"\n+                              IsHorizontalRailEnabled=\"False\"\n+                              HorizontalScrollBarVisibility=\"Disabled\"\n+                              HorizontalScrollMode=\"Disabled\"\n+                              IsVerticalRailEnabled=\"True\"\n+                              VerticalScrollBarVisibility=\"Auto\"\n+                              VerticalScrollMode=\"Enabled\"\u003e\n+                    \u003cGridView SelectionMode=\"None\"\n+                              ItemsSource=\"{Binding OcrDocuments}\"\n+                              Padding=\"20,0\"\u003e\n+                        \u003cGridView.ItemTemplate\u003e\n+                            \u003cDataTemplate\u003e\n+\n+                                \u003cGrid Width=\"200\" Height=\"200\" RequestedTheme=\"Light\" \u003e\n+                                    \u003cGrid.RowDefinitions\u003e\n+                                        \u003cRowDefinition Height=\"100\" /\u003e\n+                                        \u003cRowDefinition Height=\"Auto\" /\u003e\n+                                        \u003cRowDefinition Height=\"Auto\" /\u003e\n+                                    \u003c/Grid.RowDefinitions\u003e\n+\n+                                    \u003cButton Grid.Row=\"0\" \n+                                            Opacity=\"0.5\"\n+                                            HorizontalAlignment=\"Center\"\n+                                            FontSize=\"70\"\n+                                            FontFamily=\"Segoe UI Symbol\"\n+                                            Foreground=\"{StaticResource LightColorBrush}\"\n+                                            Content=\"\u0026#xE132;\"\n+                                            IsEnabled=\"{Binding IsCompleted}\"\n+                                            Style=\"{StaticResource TextBlockButtonStyle}\"\u003e\n+                                        \u003cButton.Flyout\u003e\n+                                            \u003cFlyout\u003e\n+                                                \u003cGrid Width=\"380\"\u003e\n+                                                    \u003cTextBox AcceptsReturn=\"True\" \n+                                                             TextWrapping=\"Wrap\"\n+                                                             BorderBrush=\"Transparent\"\n+                                                             HorizontalAlignment=\"Stretch\" \n+                                                             Text=\"{Binding Preview}\" /\u003e\n+                                                \u003c/Grid\u003e\n+                                            \u003c/Flyout\u003e\n+                                        \u003c/Button.Flyout\u003e\n+                                    \u003c/Button\u003e\n+                                    \u003cProgressRing Grid.Row=\"0\" \n+                                                  VerticalAlignment=\"Center\"\n+                                                  HorizontalAlignment=\"Center\"\n+                                                  IsActive=\"{Binding IsCompleted, Converter={StaticResource InversedBooleanConverter}}\"\n+                                                  Visibility=\"{Binding IsCompleted, Converter={StaticResource InversedBooleanToVisibilityConverter}}\"\n+                                                  Margin=\"0,10,0,0\"\n+                                                  Height=\"20\" Width=\"20\"\n+                                                  Foreground=\"White\"\u003e\n+                                    \u003c/ProgressRing\u003e\n+\n+                                    \u003cTextBlock Grid.Row=\"1\" \n+                                               TextAlignment=\"Center\"\n+                                               HorizontalAlignment=\"Stretch\"\n+                                               TextWrapping=\"NoWrap\"\n+                                               TextTrimming=\"CharacterEllipsis\"\n+                                               Text=\"{Binding OcrTask.File.Name}\"\n+                                               Style=\"{StaticResource BodyTextBlockStyle}\"  /\u003e\n+\n+                                    \u003cButton Grid.Row=\"2\" \n+                                            Content=\"Annuler l'analyse\" \n+                                            Margin=\"10,0\"\n+                                            HorizontalAlignment=\"Center\"\n+                                            Foreground=\"Red\"\n+                                            FontWeight=\"SemiLight\"\n+                                            Command=\"{Binding ViewModel.CancelOcrCommand, ElementName=pageRoot}\" \n+                                            CommandParameter=\"{Binding}\"\n+                                            Visibility=\"{Binding IsCompleted, Converter={StaticResource InversedBooleanToVisibilityConverter}}\"\n+                                            Style=\"{StaticResource TextBlockButtonStyle}\" /\u003e\n+\n+                                    \u003cButton Grid.Row=\"2\" Margin=\"10\"\n+                                            HorizontalAlignment=\"Center\"\n+                                            Foreground=\"Green\"\n+                                            Padding=\"5,0,5,3\"\n+                                            Command=\"{Binding ViewModel.ExportContentInNewDocumentCommand, ElementName=pageRoot}\"\n+                                            CommandParameter=\"{Binding}\"\n+                                            Visibility=\"{Binding IsCompleted, Converter={StaticResource BooleanToVisibilityConverter}}\"\u003e\n+                                        \u003cGrid\u003e\n+                                            \u003cTextBlock HorizontalAlignment=\"Stretch\" \n+                                                       TextAlignment=\"Center\"\n+                                                       TextWrapping=\"Wrap\"\n+                                                       Text=\"Créer un nouveau document texte à partir du contenu\" /\u003e\n+                                        \u003c/Grid\u003e\n+                                    \u003c/Button\u003e\n+\n+                                \u003c/Grid\u003e\n+                            \u003c/DataTemplate\u003e\n+                        \u003c/GridView.ItemTemplate\u003e\n+                        \n+                        \u003cGridView.ItemsPanel\u003e\n+                            \u003cItemsPanelTemplate\u003e\n+                                \u003cItemsWrapGrid Orientation=\"Horizontal\" /\u003e\n+                            \u003c/ItemsPanelTemplate\u003e\n+                        \u003c/GridView.ItemsPanel\u003e\n+                    \u003c/GridView\u003e\n+                \u003c/ScrollViewer\u003e\n+\n+\n+                \u003cButton Grid.Row=\"3\" \n+                        RequestedTheme=\"Light\"\n+                        HorizontalAlignment=\"Center\"\n+                        Margin=\"10\"\n+                        Command=\"{Binding SkipOcrActionsCommand}\"\u003e\n+                    \u003cStackPanel Orientation=\"Horizontal\"\u003e\n+                        \u003cTextBlock Text=\"Retourner à l'affaire\" \n+                                   VerticalAlignment=\"Center\" \n+                                   TextLineBounds=\"Full\"\n+                                   Margin=\"0,0,10,0\"/\u003e\n+                        \u003cSymbolIcon Symbol=\"Forward\" \n+                                    VerticalAlignment=\"Center\"/\u003e\n                     \u003c/StackPanel\u003e\n-                \u003c/StackPanel\u003e\n+                \u003c/Button\u003e\n             \u003c/Grid\u003e\n \n         \u003c/Grid\u003e",
            "new_path": "AidaCorrex/Pages/Case/CasePage.xaml",
            "old_path": "AidaCorrex/Pages/Case/CasePage.xaml",
            "a_mode": "100644",
            "b_mode": "100644",
            "new_file": false,
            "renamed_file": false,
            "deleted_file": false
        },
        {
            "diff": "--- a/AidaCorrex/Pages/Case/CasePage.xaml.cs\n+++ b/AidaCorrex/Pages/Case/CasePage.xaml.cs\n@@ -14,6 +14,7 @@ using AidaCorrex.Common;\n using Windows.UI.Xaml.Controls;\n using Windows.UI.Xaml.Navigation;\n // Pour en savoir plus sur le modèle d'élément Page Détail de l'élément, consultez la page http://go.microsoft.com/fwlink/?LinkId=234232\n+using AidaCorrex.Core;\n using AidaCorrex.Pages.Frame;\n using AidaCorrex.Services;\n using AidaCorrex.ViewModels;\n@@ -53,6 +54,7 @@ namespace AidaCorrex.Pages.Case\n                 Domains = new ObservableCollection\u003cDomainViewModel\u003e(),\n                 SelectedDocuments = new ObservableCollection\u003cDocumentViewModel\u003e(),\n                 SelectableDecisions = new ObservableCollection\u003cDecisionViewModel\u003e(),\n+                OcrDocuments = new ObservableCollection\u003cOcrDocumentViewModel\u003e(),\n                 CaseViewModel = new CaseViewModel()\n                 {\n                     Documents = new ObservableCollection\u003cDocumentViewModel\u003e(),",
            "new_path": "AidaCorrex/Pages/Case/CasePage.xaml.cs",
            "old_path": "AidaCorrex/Pages/Case/CasePage.xaml.cs",
            "a_mode": "100644",
            "b_mode": "100644",
            "new_file": false,
            "renamed_file": false,
            "deleted_file": false
        },
        {
            "diff": "--- a/AidaCorrex/ViewModels/Case/CaseViewModel.cs\n+++ b/AidaCorrex/ViewModels/Case/CaseViewModel.cs\n@@ -3,6 +3,8 @@ using System.Collections.Generic;\n using System.Collections.ObjectModel;\n using System.Collections.Specialized;\n using System.Linq;\n+using System.Runtime.InteropServices.WindowsRuntime;\n+using System.Text;\n using System.Threading.Tasks;\n using Windows.Storage;\n using Windows.System;\n@@ -12,6 +14,7 @@ using DataAccessLayer;\n using DataAccessLayer.Models.Case;\n using DataAccessLayer.Models.Frames;\n using DataAccessLayer.Repositories.Interfaces;\n+using UnicodeEncoding = Windows.Storage.Streams.UnicodeEncoding;\n \n namespace AidaCorrex.ViewModels.Case\n {\n@@ -201,6 +204,8 @@ namespace AidaCorrex.ViewModels.Case\n             return await CaseRepository.SaveCase(Case);\n         }\n \n+        private readonly Encoding Windows1252 = Encoding.GetEncoding(\"Windows-1252\");\n+\n         public async Task\u003cDocument\u003e AddNewDocument(StorageFile storageFile)\n         {\n             var doc = new Document()\n@@ -210,6 +215,38 @@ namespace AidaCorrex.ViewModels.Case\n                 CaseId = Case.Id\n             };\n \n+            if (storageFile.ContentType.StartsWith(\"text/\"))\n+            {\n+                string content = null;\n+                try\n+                {\n+                    content = await FileIO.ReadTextAsync(storageFile, UnicodeEncoding.Utf8);\n+                }\n+                catch (ArgumentOutOfRangeException)\n+                {\n+                    // FUCK YOU NON UTF-8 FILES\n+                }\n+\n+                if (String.IsNullOrWhiteSpace(content))\n+                {\n+                    try\n+                    {\n+                        var bytes = (await FileIO.ReadBufferAsync(storageFile)).ToArray();\n+                        var utf8Bytes = Encoding.Convert(Windows1252, Encoding.UTF8, bytes);\n+                        content = Encoding.UTF8.GetString(utf8Bytes, 0, utf8Bytes.Length);\n+                    }\n+                    catch (Exception)\n+                    {\n+                        // WELL, AT LEAST WE TRIED\n+                    }\n+                }\n+\n+                if (!String.IsNullOrWhiteSpace(content))\n+                {\n+                    doc.Content = content;\n+                }\n+            }\n+\n             await CaseRepository.SaveDocument(doc);\n             doc.FileName = String.Format(\"{0}{1}\", doc.Id, storageFile.FileType.ToLowerInvariant());\n             await CaseRepository.SaveDocument(doc);",
            "new_path": "AidaCorrex/ViewModels/Case/CaseViewModel.cs",
            "old_path": "AidaCorrex/ViewModels/Case/CaseViewModel.cs",
            "a_mode": "100644",
            "b_mode": "100644",
            "new_file": false,
            "renamed_file": false,
            "deleted_file": false
        },
        {
            "diff": "--- /dev/null\n+++ b/AidaCorrex/ViewModels/OcrDocumentViewModel.cs\n@@ -0,0 +1,30 @@\n+﻿using AidaCorrex.Core;\n+using DataAccessLayer.Models.Case;\n+\n+namespace AidaCorrex.ViewModels\n+{\n+    public class OcrDocumentViewModel : BindableBase\n+    {\n+        public Document Document { get; set; }\n+\n+        public OcrTask OcrTask { get; set; }\n+\n+        public string Preview { get; set; }\n+\n+        private bool _hasEmptyContent;\n+        public bool HasEmptyContent\n+        {\n+            get { return _hasEmptyContent; }\n+            set { SetValue(ref _hasEmptyContent, value); }\n+        }\n+\n+        private bool _isCompleted;\n+        public bool IsCompleted\n+        {\n+            get { return _isCompleted; }\n+            set { SetValue(ref _isCompleted, value); }\n+        }\n+\n+        public bool IsCanceled { get; set; }\n+    }\n+}",
            "new_path": "AidaCorrex/ViewModels/OcrDocumentViewModel.cs",
            "old_path": "AidaCorrex/ViewModels/OcrDocumentViewModel.cs",
            "a_mode": "0",
            "b_mode": "100644",
            "new_file": true,
            "renamed_file": false,
            "deleted_file": false
        },
        {
            "diff": "--- a/AidaCorrex/ViewModels/Pages/CasePageViewModel.cs\n+++ b/AidaCorrex/ViewModels/Pages/CasePageViewModel.cs\n@@ -2,9 +2,11 @@\n using System.Collections.Generic;\n using System.Collections.ObjectModel;\n using System.ComponentModel;\n+using System.Diagnostics;\n using System.IO;\n using System.Linq;\n using System.Runtime.InteropServices.WindowsRuntime;\n+using System.Text;\n using System.Threading;\n using System.Threading.Tasks;\n using Windows.Data.Pdf;\n@@ -20,6 +22,8 @@ using Windows.UI.Xaml;\n using Windows.UI.Xaml.Controls;\n using Windows.UI.Xaml.Media.Imaging;\n using WindowsPreview.Media.Ocr;\n+using AidaCorrex.Core;\n+using AidaCorrex.Core.Extensions;\n using AidaCorrex.ViewModels.Case;\n using AidaCorrex.ViewModels.Frame;\n using AidaCorrex.Xaml.UserControls;\n@@ -32,6 +36,7 @@ using DataAccessLayer.Repositories.Interfaces;\n using AidaCorrex.Common;\n using Infragistics;\n using Matrix.Util;\n+using UnicodeEncoding = Windows.Storage.Streams.UnicodeEncoding;\n \n namespace AidaCorrex.ViewModels.Pages\n {\n@@ -210,71 +215,26 @@ namespace AidaCorrex.ViewModels.Pages\n         }\n \n \n-        private bool _isOcrRunning;\n-        public bool IsOcrRunning\n-        {\n-            get { return _isOcrRunning; }\n-            set { SetValue(ref _isOcrRunning, value); }\n-        }\n-\n-        private Task _ocrTask;\n-        private CancellationTokenSource _ocrTaskCancellationTokenSource;\n-        private CancellationToken _ocrTaskCancellationToken;\n-\n-\n-        private RelayCommand _cancelOcrCommand;\n-        public RelayCommand CancelOcrCommand\n+        private DelegateCommand\u003cOcrDocumentViewModel\u003e _cancelOcrCommand;\n+        public DelegateCommand\u003cOcrDocumentViewModel\u003e CancelOcrCommand\n         {\n             get\n             {\n                 if (_cancelOcrCommand == null)\n                 {\n-                    _cancelOcrCommand = new RelayCommand(\n-                        () =\u003e\n-                        {\n-                            var source = _ocrTaskCancellationTokenSource;\n-                            if (source != null \u0026\u0026 !source.IsCancellationRequested)\n-                            {\n-                                try\n-                                {\n-                                    source.Cancel();\n-                                    source.Dispose();\n-                                }\n-                                catch (ObjectDisposedException)\n-                                {\n-                                    // already disposed, we're good\n-                                }\n-                            }\n-                        }\n-                    );\n+                    _cancelOcrCommand = new DelegateCommand\u003cOcrDocumentViewModel\u003e(ocrDocument =\u003e\n+                    {\n+                        ocrDocument.OcrTask.CancellationTokenSource.Cancel();\n+                        ocrDocument.IsCompleted = true;\n+                        ocrDocument.IsCanceled = true;\n+                    });\n                 }\n                 return _cancelOcrCommand;\n             }\n         }\n \n+        private const int PreviewLength = 1000;\n \n-        private double _maxOcrImageSize = 2600d;\n-        private double _minOcrImageSize = 40d;\n-\n-        private Action\u003cCasePageViewModel\u003e _setLongRunning = vm =\u003e vm.IsLongRunning = true;\n-\n-        private bool _isLongRunning;\n-        public bool IsLongRunning\n-        {\n-            get { return _isLongRunning; }\n-            set { SetValue(ref _isLongRunning, value); }\n-        }\n-\n-        private string _currentlyAnalysedDocumentName;\n-        public string CurrentlyAnalysedDocumentName\n-        {\n-            get { return _currentlyAnalysedDocumentName; }\n-            set { SetValue(ref _currentlyAnalysedDocumentName, value); }\n-        }\n-\n-        private const string Space = \" \";\n-        private const string NewLine = \"\\n\";\n-        \n         private RelayCommand _newDocumentCommand;\n         public RelayCommand NewDocumentCommand\n         {\n@@ -309,6 +269,12 @@ namespace AidaCorrex.ViewModels.Pages\n                         picker.FileTypeFilter.Add(\".csv\");\n                         picker.FileTypeFilter.Add(\".tsv\");\n \n+                        // web ? why the fuck not...\n+                        picker.FileTypeFilter.Add(\".html\");\n+                        picker.FileTypeFilter.Add(\".xml\");\n+                        picker.FileTypeFilter.Add(\".js\");\n+                        picker.FileTypeFilter.Add(\".json\");\n+\n                         // others\n                         picker.FileTypeFilter.Add(\".pdf\");\n \n@@ -319,113 +285,18 @@ namespace AidaCorrex.ViewModels.Pages\n                             return;\n                         }\n \n+                        OcrDocuments.Clear();\n+\n                         foreach (var storageFile in files)\n                         {\n-                            await SaveAndOcrFileAsDocument(storageFile);\n-                            continue;\n-\n                             var doc = await CaseViewModel.AddNewDocument(storageFile);\n-                            var type = storageFile.ContentType.ToLowerInvariant();\n \n-                            if (!type.StartsWith(\"image\") \u0026\u0026 !type.Contains(\"pdf\"))\n+                            if (!storageFile.CanBeOcrized())\n                             {\n-                                return;\n+                                continue;\n                             }\n \n-                            // OCR ?\n-                            var content = String.Empty;\n-                            IsOcrRunning = true;\n-\n-                            var file = storageFile;\n-\n-                            // new CancellationTokenSource\n-                            using (_ocrTaskCancellationTokenSource = new CancellationTokenSource())\n-                            {\n-                                _ocrTaskCancellationToken = _ocrTaskCancellationTokenSource.Token;\n-                                CurrentlyAnalysedDocumentName = file.Name;\n-\n-                                //await Task.Run(async () =\u003e\n-                                //{\n-                                    //var documentBuffers = await GetPixelBuffers(file);\n-\n-                                    var buffers = new List\u003cDocumentPixelBufferViewModel\u003e();\n-                                    var prop = await file.Properties.GetImagePropertiesAsync();\n-                                    var size = NormalizeSize(prop.Width, prop.Height);\n-\n-                                    if (size.Height \u003c _minOcrImageSize || size.Width \u003c _minOcrImageSize)\n-                                    {\n-                                        return; // buffers;\n-                                    }\n-\n-                                    //var buffer = await FileIO.ReadBufferAsync(file);\n-                                    //buffers.Add(new DocumentPixelBufferViewModel(buffer, size));\n-\n-                                    //WriteableBitmap bitmap = null;\n-\n-                                    _ocrTaskCancellationToken.ThrowIfCancellationRequested();\n-\n-                                    //await Window.Current.Dispatcher.RunAsync(CoreDispatcherPriority.High, async () =\u003e\n-                                    //{\n-                                    //    using (var stream = await file.OpenAsync(FileAccessMode.Read))\n-                                    //    {\n-                                    //        BitmapDecoder a = await BitmapDecoder.CreateAsync(stream);\n-                                            \n-                                    //        var b = await a.GetPixelDataAsync();\n-                                    //        //b.DetachPixelData();\n-                                    //        buffers.Add(new DocumentPixelBufferViewModel(b.DetachPixelData(), size));\n-\n-                                    //        //bitmap = new WriteableBitmap(Convert.ToInt32(size.Width), Convert.ToInt32(size.Height));\n-                                    //        //await bitmap.SetSourceAsync(stream);\n-                                    //    }\n-                                    //});\n-\n-                                    //buffers.Add(new DocumentPixelBufferViewModel(bitmap.PixelBuffer, size));\n-                                    //stream.Dispose();\n-\n-\n-                                    using (var stream = await file.OpenAsync(FileAccessMode.Read))\n-                                    {\n-                                        BitmapDecoder a = await BitmapDecoder.CreateAsync(stream);\n-\n-                                        var b = await a.GetPixelDataAsync();\n-                                        //b.DetachPixelData();\n-                                        buffers.Add(new DocumentPixelBufferViewModel(b.DetachPixelData(), size));\n-\n-                                        //bitmap = new WriteableBitmap(Convert.ToInt32(size.Width), Convert.ToInt32(size.Height));\n-                                        //await bitmap.SetSourceAsync(stream);\n-                                    }\n-\n-                                    var documentBuffers = buffers;\n-\n-\n-\n-                                    foreach (var docBuffer in documentBuffers)\n-                                    {\n-                                        _ocrTaskCancellationToken.ThrowIfCancellationRequested();\n-\n-                                        var engine = new OcrEngine(OcrLanguage.English);\n-                                        var e = docBuffer.Buffer.Where(b =\u003e b != 0).ToArray();\n-\n-                                        var results = await engine.RecognizeAsync(Convert.ToUInt32(docBuffer.Size.Height), Convert.ToUInt32(docBuffer.Size.Width), docBuffer.Buffer);\n-\n-                                        if (results != null)\n-                                        {\n-                                            foreach (var ocrLine in results.Lines)\n-                                            {\n-                                                foreach (var ocrWord in ocrLine.Words)\n-                                                {\n-                                                    content += ocrWord.Text + Space;\n-                                                }\n-\n-                                                content += NewLine;\n-                                            }\n-                                        }\n-                                    }\n-\n-                                    doc.Content = content.Trim();\n-                                    await CaseViewModel.CaseRepository.SaveDocument(doc);\n-                                //}, _ocrTaskCancellationToken);\n-                            }\n+                            ScanFileContent(storageFile, doc);\n                         }\n \n                         //IsOcrRunning = false;\n@@ -435,187 +306,63 @@ namespace AidaCorrex.ViewModels.Pages\n             }\n         }\n \n-        private bool _canChoosePostOcrAction;\n-        public bool CanChoosePostOcrAction\n-        {\n-            get { return _canChoosePostOcrAction; }\n-            set { SetValue(ref _canChoosePostOcrAction, value); }\n-        }\n-\n-        private async Task SaveAndOcrFileAsDocument(StorageFile storageFile)\n+        private DelegateCommand\u003cOcrDocumentViewModel\u003e _exportContentInNewDocumentCommand;\n+        public DelegateCommand\u003cOcrDocumentViewModel\u003e ExportContentInNewDocumentCommand\n         {\n-            var doc = await CaseViewModel.AddNewDocument(storageFile);\n-            var type = storageFile.ContentType.ToLowerInvariant();\n-\n-            if (String.IsNullOrWhiteSpace(type))\n-            {\n-                type = storageFile.FileType;\n-            }\n-\n-            if (!type.StartsWith(\"image\") \u0026\u0026 !type.Contains(\"pdf\"))\n-            {\n-                return;\n-            }\n-\n-            // OCR ?\n-            var content = String.Empty;\n-            IsOcrRunning = true;\n-            CanChoosePostOcrAction = false;\n-\n-            var file = storageFile;\n-\n-            // new CancellationTokenSource\n-            _ocrTaskCancellationTokenSource = new CancellationTokenSource();\n-            _ocrTaskCancellationToken = _ocrTaskCancellationTokenSource.Token;\n-\n-            _ocrTaskCancellationToken.Register(vm =\u003e { (vm as CasePageViewModel).IsOcrRunning = false; }, this);\n-\n-            CurrentlyAnalysedDocumentName = file.Name;\n-\n-            await Task.Run(async () =\u003e\n+            get\n             {\n-                await Task.Delay(10000);\n-                var documentBuffers = await GetPixelBuffers(file);\n-                foreach (var docBuffer in documentBuffers)\n+                if (_exportContentInNewDocumentCommand == null)\n                 {\n-                    _ocrTaskCancellationToken.ThrowIfCancellationRequested();\n-                    var engine = new OcrEngine(OcrLanguage.French);\n-                    var results = await engine.RecognizeAsync(Convert.ToUInt32(docBuffer.Size.Height), Convert.ToUInt32(docBuffer.Size.Width), docBuffer.Buffer);\n-\n-                    if (results != null)\n-                    {\n-                        foreach (var ocrLine in results.Lines)\n+                    _exportContentInNewDocumentCommand = new DelegateCommand\u003cOcrDocumentViewModel\u003e(\n+                        async ocrDocumentViewModel =\u003e\n                         {\n-                            foreach (var ocrWord in ocrLine.Words)\n-                            {\n-                                content += ocrWord.Text + Space;\n-                            }\n+                            var originalDoc = ocrDocumentViewModel.Document;\n+                            var file = await ApplicationData.Current.TemporaryFolder.CreateFileAsync(originalDoc.DocumentName + \" - text extrait.txt\", CreationCollisionOption.GenerateUniqueName);\n \n-                            content += NewLine;\n+                            await FileIO.WriteTextAsync(file, ocrDocumentViewModel.OcrTask.Content, UnicodeEncoding.Utf8);\n+                            await CaseViewModel.AddNewDocument(file);\n+\n+                            OcrDocuments.Remove(ocrDocumentViewModel);\n                         }\n-                    }\n+                    );\n                 }\n \n-                CanChoosePostOcrAction = true;\n-                // TODO enchainement\n-\n-                //doc.Content = content.Trim();\n-                //await CaseViewModel.CaseRepository.SaveDocument(doc);\n-            }, _ocrTaskCancellationToken);\n-        }\n-\n-        private async Task\u003cIList\u003cDocumentPixelBufferViewModel\u003e\u003e GetPixelBuffers(StorageFile file)\n-        {\n-            if (file.ContentType.Contains(\"pdf\") || file.FileType.Contains(\"pdf\"))\n-            {\n-                return await GetBuffersFromPdf(file);\n-            }\n-\n-            if (file.ContentType.StartsWith(\"image\"))\n-            {\n-                return await GetBufferFromImage(file);\n+                return _exportContentInNewDocumentCommand;\n             }\n-\n-            throw new ArgumentException(\"file must be a PDF or an image\", \"file\");\n         }\n \n-        private async Task\u003cIList\u003cDocumentPixelBufferViewModel\u003e\u003e GetBuffersFromPdf(StorageFile file)\n+        private RelayCommand _skipOcrActionsCommand;\n+        public RelayCommand SkipOcrActionsCommand\n         {\n-            var streams = new List\u003cDocumentPixelBufferViewModel\u003e();\n-            var pdfDocument = await PdfDocument.LoadFromFileAsync(file);\n-            for (uint i = 0; i \u003c pdfDocument.PageCount; i++)\n+            get\n             {\n-                var page = pdfDocument.GetPage(i);\n-\n-                _ocrTaskCancellationToken.ThrowIfCancellationRequested();\n-\n-                await page.PreparePageAsync();\n-\n-                var size = NormalizeSize(page.Size.Width, page.Size.Height);\n-\n-                if (size.Height \u003c _minOcrImageSize || size.Width \u003c _minOcrImageSize)\n-                {\n-                    continue;\n-                }\n-\n-                using (var stream = new InMemoryRandomAccessStream())\n+                if (_skipOcrActionsCommand == null)\n                 {\n-                    _ocrTaskCancellationToken.ThrowIfCancellationRequested();\n-                    await page.RenderToStreamAsync(stream, new PdfPageRenderOptions() {DestinationHeight = Convert.ToUInt32(size.Height), DestinationWidth = Convert.ToUInt32(size.Width)});\n+                    _skipOcrActionsCommand = new RelayCommand(\n+                        () =\u003e\n+                        {\n+                            foreach (var ocrDocumentViewModel in OcrDocuments)\n+                            {\n+                                ocrDocumentViewModel.OcrTask.CancellationTokenSource.Cancel();\n+                            }\n \n-                    _ocrTaskCancellationToken.ThrowIfCancellationRequested();\n-                    var decoder = await BitmapDecoder.CreateAsync(stream);\n-                    var pixelData = await decoder.GetPixelDataAsync();\n-                    streams.Add(new DocumentPixelBufferViewModel(pixelData.DetachPixelData(), size));\n+                            OcrDocuments.Clear();\n+                        }\n+                    );\n                 }\n-            }\n-\n-            return streams;\n-        }\n-\n-        private async Task\u003cIList\u003cDocumentPixelBufferViewModel\u003e\u003e GetBufferFromImage(StorageFile file)\n-        {\n-            var buffers = new List\u003cDocumentPixelBufferViewModel\u003e();\n-            var prop = await file.Properties.GetImagePropertiesAsync();\n-            var size = NormalizeSize(prop.Width, prop.Height);\n-\n-            if (size.Height \u003c _minOcrImageSize || size.Width \u003c _minOcrImageSize)\n-            {\n-                return buffers;\n-            }\n-\n-            using (var stream = await file.OpenAsync(FileAccessMode.Read))\n-            {\n-                var decoder = await BitmapDecoder.CreateAsync(stream);\n-                var pixelData = await decoder.GetPixelDataAsync();\n \n-                buffers.Add(new DocumentPixelBufferViewModel(pixelData.DetachPixelData(), size));\n+                return _skipOcrActionsCommand;\n             }\n-\n-            return buffers;\n         }\n \n-        private Size NormalizeSize(double width, double height)\n+        private bool _canChoosePostOcrAction;\n+        public bool CanChoosePostOcrAction\n         {\n-            var h = height;\n-            var w = width;\n-\n-            if (h \u003c _minOcrImageSize || w \u003c _minOcrImageSize)\n-            {\n-                return Size.Empty;\n-            }\n-\n-            if (h \u003e _maxOcrImageSize)\n-            {\n-                h = _maxOcrImageSize;\n-                w = (h / height) * width;\n-            }\n-            else if (w \u003e 2600d)\n-            {\n-                w = _maxOcrImageSize;\n-                h = (w / width) * height;\n-            }\n-\n-            return new Size(w, h);\n+            get { return _canChoosePostOcrAction; }\n+            set { SetValue(ref _canChoosePostOcrAction, value); }\n         }\n \n-        private class DocumentPixelBufferViewModel\n-        {\n-            public byte[] Buffer { get; set; }\n-\n-            public Size Size { get; set; }\n-\n-            public DocumentPixelBufferViewModel(IBuffer buffer, Size size) : this(buffer.ToArray(), size)\n-            {\n-\n-            }\n-\n-            public DocumentPixelBufferViewModel(byte[] buffer, Size size)\n-            {\n-                Buffer = buffer;\n-                Size = size;\n-            }\n-        }\n+        public ObservableCollection\u003cOcrDocumentViewModel\u003e OcrDocuments { get; set; }\n \n         private RelayCommand _newPictureFromCameraCommand;\n         public RelayCommand NewPictureFromCameraCommand\n@@ -632,18 +379,26 @@ namespace AidaCorrex.ViewModels.Pages\n \n                         var picture = await ui.CaptureFileAsync(CameraCaptureUIMode.Photo);\n \n-                        if (picture != null)\n+                        if (picture == null)\n                         {\n-                            var doc = await CaseViewModel.AddNewDocument(picture);\n+                            return;\n                         }\n+\n+                        OcrDocuments.Clear();\n+                        var doc = await CaseViewModel.AddNewDocument(picture);\n+\n+                        if (!picture.CanBeOcrized())\n+                        {\n+                            return;\n+                        }\n+\n+                        ScanFileContent(picture, doc);\n                     });\n                 }\n                 return _newPictureFromCameraCommand;\n             }\n         }\n         \n-        \n-\n         private RelayCommand _newPersonCommand;\n         public RelayCommand NewPersonCommand\n         {\n@@ -1201,6 +956,55 @@ namespace AidaCorrex.ViewModels.Pages\n             }\n         }\n \n+        \n+        private void ScanFileContent(StorageFile storageFile, Document doc)\n+        {\n+            var ocrTask = new OcrTask(storageFile);\n+            var ocrDocument = new OcrDocumentViewModel()\n+            {\n+                Document = doc,\n+                OcrTask = ocrTask,\n+                IsCompleted = false,\n+            };\n+\n+            OcrDocuments.Add(ocrDocument);\n+\n+            var analyseTask = ocrTask.Analyse();\n+            analyseTask.ContinueWith((task, o) =\u003e SaveDocumentContent(task, o), ocrDocument, CancellationToken.None, TaskContinuationOptions.None, TaskScheduler.FromCurrentSynchronizationContext());\n+        }\n+\n+        private async Task SaveDocumentContent(Task completedAnalyseTask, object docViewModel)\n+        {\n+            var documentViewModel = docViewModel as OcrDocumentViewModel;\n+            var content = documentViewModel.OcrTask.Content;\n+\n+            if (!String.IsNullOrWhiteSpace(content))\n+            {\n+                documentViewModel.Document.Content = content;\n+                documentViewModel.Preview = String.Join(string.Empty, content.Take(PreviewLength));\n+\n+                if (content.Length \u003e PreviewLength)\n+                {\n+                    documentViewModel.Preview += \"...\";\n+                }\n+                await CaseViewModel.CaseRepository.SaveDocument(documentViewModel.Document);\n+            }\n+\n+            if (documentViewModel.IsCanceled)\n+            {\n+                OcrDocuments.Remove(documentViewModel);\n+            }\n+            else\n+            {\n+                if (String.IsNullOrWhiteSpace(content))\n+                {\n+                    OcrDocuments.Remove(documentViewModel);\n+                }\n+\n+                documentViewModel.IsCompleted = true;\n+            }\n+        }\n+\n         private async void FetchCildren(DecisionViewModel decisionViewModel)\n         {\n             IEnumerable\u003cDecision\u003e children = await decisionViewModel.GetChildrenDecisions();",
            "new_path": "AidaCorrex/ViewModels/Pages/CasePageViewModel.cs",
            "old_path": "AidaCorrex/ViewModels/Pages/CasePageViewModel.cs",
            "a_mode": "100644",
            "b_mode": "100644",
            "new_file": false,
            "renamed_file": false,
            "deleted_file": false
        },
        {
            "diff": "--- a/AidaCorrex/packages.config\n+++ b/AidaCorrex/packages.config\n@@ -2,7 +2,7 @@\n \u003cpackages\u003e\n   \u003cpackage id=\"Facebook\" version=\"7.0.0-alpha\" targetFramework=\"win81\" /\u003e\n   \u003cpackage id=\"Facebook.Client\" version=\"0.9.1-alpha\" targetFramework=\"win81\" /\u003e\n-  \u003cpackage id=\"MatriX\" version=\"1.6.0.0\" targetFramework=\"win81\" /\u003e\n+  \u003cpackage id=\"MatriX\" version=\"1.6.0.6\" targetFramework=\"win81\" /\u003e\n   \u003cpackage id=\"Microsoft.Windows.Ocr\" version=\"1.0.0\" targetFramework=\"win81\" /\u003e\n   \u003cpackage id=\"Newtonsoft.Json\" version=\"6.0.8\" targetFramework=\"win81\" /\u003e\n \u003c/packages\u003e\n\\ No newline at end of file",
            "new_path": "AidaCorrex/packages.config",
            "old_path": "AidaCorrex/packages.config",
            "a_mode": "100644",
            "b_mode": "100644",
            "new_file": false,
            "renamed_file": false,
            "deleted_file": false
        }
    ]

}